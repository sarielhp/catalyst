#! /bin/bash


function  count_lines() {
    X=$(wc -l $1)
    Y=${X% *}
    echo $Y
}

function  find_empty_dir() {
    COUNTER=1
    while [ Your != "done" ]
    do
        OUT=$DSUCC""$(printf "%06d" $COUNTER)
        if  [[ ! -e $OUT ]]; then
             echo $OUT
             return
        fi
        COUNTER=$[$COUNTER +1]
    done
}

function  f_kill_grep() {
    TDIR=/tmp/sariel/kill_grep
    mkdir -p $TDIR >& /dev/null
    TFL=$TDIR/kill_grep.txt

    ps auxw | grep $1 | grep -v kill_grep | grep -v grep > $TFL
    L=$(count_lines $TFL)
    if  (( $L > 0 )); then
        cat $TFL |  gi -v kill_grep
        echo "ESCAPED PROCESSES: " $L
        kill -9 `cat $TFL | awk '{print $2}'` >& /dev/null
    fi
    #echo "NO ESCAPED PROCESSES"
}


function  log_start() {
    rm -f $LOG
    echo "### $SEARCH" >> $LOG
    echo "### -------------------------------------" >> $LOG
    echo "### LOG     : $LOG" >> $LOG
    echo "### PROG    : $PROG" >> $LOG
    echo "### TIMES   : $TIMES" >> $LOG
    echo "### FLAGS   : $CATALYST_FLAGS" >> $LOG
    echo "### -------------------------------------" >> $LOG
}


function  do_a_run() {
    echo "=== Starting a run..."
    #rm -r -f work >& /dev/null
    #mkdir work

    SCFLAG=""
    if  (( $SCALE > 1 )); then
        SCFLAG="-s$SCALE"
    fi

    if  [[ "$GTIMEOUT" == "" ]]; then
        GTOUT=""
    else
        GTOUT="-t$GTIMEOUT"
        echo "#### Global timeout: " $GTIMEOUT >> $LOG
    fi

    START=$(date +%s)

    FLAGS="$GTOUT $SCFLAG $CATALYST_FLAGS $PROG work/"
    SUCCFILE=$(./catalyst --success_file $FLAGS  )
    if  [[ "$SUCCFILE" == "" ]]; then
        echo "Error: Catalyst refusing to report success file!"
        exit -1
    fi
    
    echo ./catalyst $GTOUT $SCFLAG $CATALYST_FLAGS $PROG work/

         ./catalyst $GTOUT $SCFLAG $CATALYST_FLAGS $PROG work/ >> $LOG

    END=$(date +%s)

    DIFF=$(( $END - $START ))

    #sleep 1
    f_kill_grep wait #
    f_kill_grep $PROG #
    f_kill_grep ppl_mp

    echo RUNTIME: $DIFF
    echo "" >> $LOG
    echo "---------------------------------------------------" >> $LOG
    echo RUNTIME: $DIFF >> $LOG
    echo "" >> $LOG
    echo "" >> $LOG
    echo "" >> $LOG

    if  [[ -e $SUCCFILE ]]; then
        DOUT=$(find_empty_dir $DSUCC)
        SDIR=$(cat $SUCCFILE | head -1)
        if  [[ -d $SDIR ]]; then
            mkdir -p DOUT
            cp -r $SDIR/* $DOUT/
        fi
    fi
}

############################################################


function datestr() {
    echo  `date +%m_%d_%y__%H_%M_%S`
}


############################################################

function  random_tests() {
    LOG=logs/$(datestr)_random_search.txt
    #echo $LOG
    CATALYST_FLAGS="-r"
    CATALYST_FLAGS="-R" # Zeta(2) distribution
    rm -f $LOG
    for i in  $(seq 1 $TIMES); do
        printf "\n\n\n\n==================================================\n"
        echo "LOG file: " $LOG
        echo "Random search # : " $i
        do_a_run
    done
}

function  random_zeta_2_tests() {
    LOG=$DLOG/random_zeta_2__$(datestr).txt
    #echo $LOG
    CATALYST_FLAGS="-r"
    CATALYST_FLAGS="-R" # Zeta(2) distribution
    rm -f $LOG
    for i in  $(seq 1 $TIMES); do
        printf "\n\n\n\n==================================================\n"
        echo "LOG file: " $LOG
        echo "Random search # : " $i
        do_a_run
    done
}

function  wide_tests() {
    LOG=$DLOG/wide__$(datestr).txt
    CATALYST_FLAGS="-a"
    rm -f $LOG
    for i in  $(seq 1 $TIMES); do
        echo "LOG file: " $LOG
        echo "Wide search # : " $i
        do_a_run
    done
}

function  parallel_tests() {
    ################################################################
    LOG=$DLOG/parallel_$(datestr).txt
    CATALYST_FLAGS="-p"
    rm -f $LOG
    for i in $(seq 1 $TIMES); do
        echo "LOG file: " $LOG
        echo "Parallel search # : " $i
        do_a_run
    done
}


function  main_loop() {
    for i in $(seq 1 $TIMES); do
        echo "LOG file: " $LOG
        echo "$SEARCH # : " $i
        do_a_run
    done
}

function  boring_tests() {
    ################################################################
    LOG=$DLOG/single_thread__$(datestr).txt
    SEARCH="Boring single thread search"
    CATALYST_FLAGS="-b"

    log_start
    main_loop
}

# parallel_tests()


################################################################
function  counter_combined_tests() {
    LOG=$DLOG/count_comb__$(datestr).txt
    CATALYST_FLAGS="-m"
    rm -f $LOG
    log_start

    for i in $(seq 1 $TIMES); do
        echo "LOG file: " $LOG
        echo "Counter comb search #: " $i
        do_a_run
    done
}


################################################################
function  counter_tests() {
    LOG=logs/$(datestr)_counter_search.txt
    CATALYST_FLAGS=""
    rm -f $LOG
    for i in $(seq 1 $TIMES); do
        echo "LOG file: " $LOG
        echo "Counter search #: " $i
        do_a_run
    done
}


################################################################
function  copy_timeout_tests() {
    LOG=$DLOG/copy_timeout_$TIMEOUT__$(datestr).txt
    CATALYST_FLAGS="-p -c$TIMEOUT"
    rm -f $LOG
    for i in $(seq 1 $TIMES); do
        echo "LOG file: " $LOG
        echo "Timeout search #: " $i " with timeout " $TIMEOUT
        do_a_run
    done
}

BPROG=pmpl_script

#INST==wait_random_busy
#INST=wait_forever_99
#INST=cat_exp
#INST=cat_bug_no_scale
#INST=maze
INST=bug


################################################################
PROG=inputs/$INST/$BPROG
DLOG=logs/$INST/
DSUCC=success/$INST/
TIMES=100
#TIMEOUT=15

# Scale: Scale time by this factor
SCALE=1
#SCALE=2000

# Global timeout
GTIMEOUT=3000


###################################################
mkdir -p $DLOG $DSUCC >& /dev/null

echo "SUCC DIR ["$X"]"
exit -1



#boring_tests
#random_tests
#counter_tests
counter_combined_tests
#TIMEOUT=3
#copy_timeout_tests
#wide_tests
#parallel_tests

exit -1
