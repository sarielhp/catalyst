#! /bin/bash


function  count_lines() {
    X=$(wc -l $1)
    Y=${X% *}
    echo $Y
}

function  f_kill_grep() {
    TDIR=/tmp/sariel/kill_grep
    mkdir -p $TDIR >& /dev/null
    TFL=$TDIR/kill_grep.txt

    ps auxw | grep $1 | grep -v kill_grep | grep -v grep > $TFL
    L=$(count_lines $TFL)
    if  (( $L > 0 )); then
        cat $TFL |  gi -v kill_grep
        echo "ESCAPED PROCESSES: " $L
        kill -9 `cat $TFL | awk '{print $2}'` >& /dev/null
    fi
    #echo "NO ESCAPED PROCESSES"
}




function  do_a_run() {
    echo "Running (might take a while)..."
    #rm -r -f work >& /dev/null
    #mkdir work

    START=$(date +%s)

    echo ./catalyst $CATALYST_FLAGS $PROG work/

    ./catalyst $CATALYST_FLAGS $PROG work/ >> $LOG

    END=$(date +%s)

    DIFF=$(( $END - $START ))

    #sleep 1
    f_kill_grep wait #
    f_kill_grep $PROG #
    f_kill_grep ppl_mp
    
    echo RUNTIME: $DIFF
    echo "" >> $LOG
    echo "---------------------------------------------------" >> $LOG
    echo RUNTIME: $DIFF >> $LOG
    echo "" >> $LOG
    echo "" >> $LOG
    echo "" >> $LOG
}

############################################################


function datestr() {
    echo  `date +%m_%d_%y__%H_%M_%S`
}


############################################################

function  random_tests() {
    LOG=logs/$(datestr)_random_search.txt
    #echo $LOG
    CATALYST_FLAGS="-r"
    rm -f $LOG
    for i in  $(seq 1 $TIMES); do
        printf "\n\n\n\n==================================================\n" 
        echo "LOG file: " $LOG
        echo "Random search # : " $i
        do_a_run
    done
}

function  wide_tests() {
    LOG=logs/$(datestr)_wide_search.txt
    CATALYST_FLAGS="-a"
    rm -f $LOG
    for i in  $(seq 1 $TIMES); do
        echo "LOG file: " $LOG
        echo "Wide search # : " $i
        do_a_run
    done
}

function  parallel_tests() {
    ################################################################
    LOG=logs/$(datestr)_parallel_search.txt
    CATALYST_FLAGS="-p"
    rm -f $LOG
    for i in $(seq 1 $TIMES); do
        echo "LOG file: " $LOG
        echo "Parallel search # : " $i
        do_a_run
    done
}

function  log_start() {
    rm -f $LOG
    echo "$SEARCH" >> $LOG
    echo "-------------------------------------" >> $LOG
    echo "LOG     : $LOG" >> $LOG
    echo "PROG    : $PROG" >> $LOG
    echo "TIMES   : $TIMES" >> $LOG
    echo "FLAGS   : $CATALYST_FLAGS" >> $LOG
    echo "-------------------------------------" >> $LOG
}

function  main_loop() {
    for i in $(seq 1 $TIMES); do
        echo "LOG file: " $LOG
        echo "$SEARCH # : " $i
        do_a_run
    done
}

function  boring_tests() {
    ################################################################
    LOG=logs/$(datestr)_single_thread_boring_search.txt
    SEARCH="Boring single thread search"
    CATALYST_FLAGS="-b"
    log_start
    main_loop
}

# parallel_tests()


################################################################
function  counter_tests() {
    LOG=logs/$(datestr)_counter_search.txt
    CATALYST_FLAGS=""
    rm -f $LOG
    for i in $(seq 1 $TIMES); do
        echo "LOG file: " $LOG
        echo "Counter search #: " $i
        do_a_run
    done
}


#PROG=wait_random_busy/wrb_script
#PROG=wait_forever_99/wforever_script
#PROG=cat_exp/pmpl_script
PROG=cat_bug/pmpl_script
#PROG=cat_maze/pmpl_script
TIMES=100 


#boring_tests
#random_tests
#counter_tests
#wide_tests
parallel_tests

exit -1
